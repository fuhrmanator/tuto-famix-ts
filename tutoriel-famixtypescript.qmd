---
title: "Analyser les projets TypeScript avec Moose"
description: | 
  Ce tutoriel vous expliquera une démarche pour importer dans Moose un modèle d'un projet TypeScript et d'en faire une analyse.
lang: fr-FR
author: 
  - "Christopher Fuhrman"
  - "![Logo ETS](assets/logo_ets.svg){width=10%}"
date: last-modified
date-format: "DD MMMM YYYY à HH:mm:ss Z"

filters: 
  - filters/diagram-generator.lua
  - filters/fr-nbsp.lua
  - filters/inline-svg.lua
  - filters/pandoc-quotes.lua
  - quarto

format:
  html:
    self-contained: true
    syntax-definitions: 
      - syntax-highlighters/smalltalk.xml
---

# Introduction

Ce tutoriel explique comment analyser des projets TypeScript avec Moose dans le cadre du cours MGL843 à l'ÉTS. Il s'inspire du tutoriel [Analyzing Java with Moose 8](https://fuhrmanator.github.io/2019/07/29/AnalyzingJavaWithMoose.html).

## Rappel des principes

``` {.plantuml caption="Principes importants pour ce tutoriel"}
@startdot
digraph a {
  bgcolor="transparent"
  node[group=a, fontname="Arial", fontsize=14];
  subgraph pipeline {
    rank="same";
    node[style=filled];
    input [fillcolor=lightblue shape=folder label="Code source\nTypeScript (*.ts)\nà analyser"];
    ts2famix [fillcolor=yellow shape=box label="ts2famix"];
    model [fillcolor=orange shape=box label="modèle\n(json)"];
    moose [fillcolor=aquamarine shape=box label="Moose\n(Pharo)"];
    analyse [shape=note label="Analyse\nempirique" fontsize=10]
    input -> ts2famix -> model -> moose -> analyse;
  }
  edge[style="dashed"];
  node[fillcolor=lightgreen style="rounded,filled" shape="box"]
  mm [label = "Métamodèle\nFamixTypeScript"]
  mm -> moose [style=""]
  edge[color="gray"]
  mm -> { ts2famix model } [arrowhead = none] ;
}
@enddot
```

Les principes importants de ce tutoriel sont illustrés dans la figure ci-dessus. Nous les explorerons à différentes étapes du tutoriel. Le but est de vous guider à travers ces étapes, qui représentent un processus de base pour effectuer une analyse empirique dans le cadre du cours.

````{=html}
<!-- ```{.plantuml caption="Étapes du tutoriel."}
@startuml
start
:Cloner un projet TypeScript à analyser;
:Installer l'importateur ts2famix;
:Générer un modèle Famix du projet avec l'importateur;
@enduml
``` -->
````

## Obtenir le code source d'un projet TypeScript à analyser

``` plantuml
@startdot
digraph a {
  bgcolor="transparent"
  node[group=a, fontname="Arial", fontsize=14];
  node[style=filled];
  input [fillcolor=lightblue shape=folder label="Code source\nTypeScript (*.ts)\nà analyser"];
}
@enddot
```

-   Trouvez un projet en TypeScript à analyser, par exemple sur <https://github.com/Chuzzy/Emojiopoly>.
-   Clonez le projet avec Git pour obtenir le code sur votre machine locale, par exemple dans le répertoire `GitHub/Emojiopoly`.

## Obtenir une copie de l'importateur `ts2famix`

``` plantuml
@startdot
digraph a {
  bgcolor="transparent"
  node[group=a, fontname="Arial", fontsize=14];
  node[style=filled];
  ts2famix [fillcolor=yellow shape=box label="ts2famix"];
}
@enddot
```

-   ⚠ Utilisez un environnement de commande Git Bash (même sur Windows).
    -   ⚠ VS Code sur Windows démarre un terminal avec **Powershell**. Pour ce tutoriel, vous devez avoir un terminal **Git Bash**. [Consultez comment spécifier un autre *terminal shell* dans VS Code](https://code.visualstudio.com/docs/terminal/basics#_terminal-shells).
    -   Les commandes Bash sont similaires à des commandes dans Linux: `ls`, `cd`, etc.
    -   Les chemins du système de fichiers sont formatés comme sous Linux, ce qui signifie que vous devez utiliser la barre oblique (`/`) au lieu de la barre oblique inverse (`\`, utilisée sous Windows) dans les chemins.
-   `ts2famix` est une bibliothèque (*package*) `npm`. Installez [node et npm](https://nodejs.org/).
-   Installez `ts2famix` avec la commande `npm i -g ts2famix`.

## Générer un modèle du projet

``` plantuml
@startdot
digraph a {
  bgcolor="transparent"
  subgraph {
  rank=same;
  rankdir=LTR;
  node[group=a, fontname="Arial", fontsize=14];
  node[style=filled];
  input [fillcolor=lightblue shape=folder label="Code source\nTypeScript (*.ts)\nà analyser"];
  ts2famix [fillcolor=yellow shape=box label="ts2famix"];
  model [fillcolor=orange shape=box label="modèle\n(json)"];
  input -> ts2famix -> model;
  }
}
@enddot
```

-   Utilisez la même fenêtre Bash que celle utilisée précédemment pour installer l'outil **`ts2famix`**.

-   Si votre répertoire de travail actuel est le même que celui du projet, par exemple, `GitHub/Emojiopoly`, vous pouvez taper :

    ``` {.bash code-line-numbers="false"}
    ts2famix -i tsconfig.json -o emojiopoly-model.json
    ```

    Le fichier `tsconfig.ts` est en fait `GitHub/Emojiopoly/tsconfig.ts` (c'est dans le répertoire de travail). Ce fichier décrit le projet Emojiopoly (typiquement les projets TypeScript) ont ce genre de fichier. `ts2famix` utiliser ce fichier pour trouver le code source pour faire le modèle. Si votre projet n'a pas de `tsconfig.ts`, il est toujours possible d'importer des fichiers avec l'option `-i /chemin/vers/fichiers/**/*.ts` ce qui va trouver tous les fichiers `*.ts` dans l'arborescence spécifié avant le `**/`. Il s'agit d'un *glob pattern*pour spécifier des ensembles de fichiers à traiter.\
    \
    Le fichier `emojiopoly-model.json` est le modèle Famix (en format JSON) du projet TypeScript décortiqué par l'importateur. Dans les étapes suivantes, vous allez charger ce modèle dans Moose.

## Configurer l'image Moose (survol)

``` plantuml
@startdot
digraph a {
  bgcolor="transparent"
  node[group=a, fontname="Arial", fontsize=14];
  node[style=filled];
  moose [fillcolor=aquamarine shape=box label="Moose\n(Pharo)"];
}
@enddot
```

Il y a plusieurs étapes à suivre pour importer un modèle dans Moose. Une fois cette étape terminée, vous pourrez réutiliser l'image pour effectuer des analyses.

1.  Créez une image Moose avec Pharo Launcher. Pour la version actuel de `ts2famix`, il faut utiliser le *template* **Moose Suite 10 (stable)**.
2.  Chargez le métamodèle `FamixTypeScript` dans Moose.

## Créer une image Moose Suite 10 dans Pharo

-   Installez [Pharo Launcher](https://pharo.org/web/download) et lancez-le.
-   Ajoutez une image à partir du *template* **Moose Suite 10 (stable)**. <!-- - Télécharger et dézipper [Moose 8.0.2 image](https://github.com/moosetechnology/Moose/releases/download/v8.0.2/Moose8-stable.zip) (il y a 4 fichiers, y compris `Moose8-stable.image`)
          - Importer l'image dans Pharo Launcher
            - Import (bouton) > Import the image directory (...)
            - Choisir le fichier `Moose8-stable.image` dans le dossier dézippé.
            - Vérifier l'existence de l'image **Moose8-stable** dans Pharo Launcher
            - Renommer l'image (clique droite) à **Moose8.0.2-FamixTypeScript** -->

## Charger le métamodèle FamixTypeScript dans Moose

``` plantuml
@startdot
digraph a {
  bgcolor="transparent"
  node[group=a, fontname="Arial", fontsize=14];
  subgraph pipeline {
    rank="same";
    node[style=filled];
/*    input [fillcolor=lightblue shape=folder label="Code source\nTypeScript (*.ts)\nà analyser"];
    ts2famix [fillcolor=yellow shape=box label="ts2famix"];
    model [fillcolor=orange shape=box label="modèle\n(json)"]; */
    moose [fillcolor=aquamarine shape=box label="Moose\n(Pharo)"];
/*    analyse [shape=note label="Analyse\nempirique" fontsize=10] */
    moose;
  }
  //edge[style="dashed"];
  node[fillcolor=lightgreen style="rounded,filled" shape="box"]
  mm [label = "Métamodèle\nFamixTypeScript"]
  mm -> { moose } ;
}
@enddot
```

Par défaut, Moose ne possède pas de métamodèle pour le langage TypeScript. Vous devez donc charger le métamodèle FamixTypeScript dans Moose.

#### Charger avec un script Baseline

-   Sélectionnez l'image **Moose Suite 10 (development)** (créée à l'étape précédente) dans Pharo Launcher et démarrez-la (bouton **Launch**).

-   Dans Pharo, tapez <kbd>CTRL</kbd>-<kbd>O</kbd> <kbd>CTRL</kbd>-<kbd>W</kbd> pour ouvrir une fenêtre **Moose Playground**.

-   Dans cette fenêtre, tapez (collez) le texte suivant:

    ``` st
    Metacello new 
        githubUser: 'fuhrmanator' project: 'FamixTypeScript' commitish: 'master' path: 'src';
        baseline: 'FamixTypeScript';
        load
    ```

-   Appuyez sur <kbd>CTRL</kbd>-<kbd>SHIFT</kbd>-<kbd>G</kbd> (*Do it all and go*) pour exécuter la commande. Le métamodèle devrait être chargé à la fin.

### Charger le modèle du projet TypeScript dans Moose

``` plantuml
@startdot
digraph a {
  bgcolor="transparent"
  node[group=a, fontname="Arial", fontsize=14];
  subgraph pipeline {
    rank=same;
    rankdir=LTR;
    node[style=filled];
/*    input [fillcolor=lightblue shape=folder label="Code source\nTypeScript (*.ts)\nà analyser"];
    ts2famix [fillcolor=yellow shape=box label="ts2famix"]; */
    model [fillcolor=orange shape=box label="modèle\n(json)"];
    moose [fillcolor=aquamarine shape=box label="Moose\n(Pharo)"];
/*    analyse [shape=note label="Analyse\nempirique" fontsize=10] */
    model -> moose;
  }
}
@enddot
```

Maintenant que Moose connaît le métamodèle FamixTypeScript, vous pouvez charger un modèle de programme TypeScript créé par l'outil **`ts2famix`**.

-   Vous pouvez faire glisser le fichier **`emojiopoly-model.json`** et le déposer dans la fenêtre où s'exécute Moose 10. Une boîte de dialogue s'ouvrira pour vous demander de confirmer que vous souhaitez importer le modèle dans Moose.\
    ![Faire glisser et déposer le fichier modèle dans Moose 10](assets/drag-drop-model-to-moose.gif)
-   Menu **Moose \> Models browser** pour vérifier que le modèle est chargé dans Moose. Le nom **emojiopoly-model** (ou le nom du fichier .json) devrait être dans la liste de **Models** de la fenêtre.

## Effectuer une analyse

Cette étape n'est pas une analyse empirique complète, car il n'y a pas de questions de recherche ou de validation d'hypothèses, etc. Cependant, vous pouvez apprendre comment accéder aux informations dans un modèle de programme TypeScript à travers Moose.

-   À partir de la fenêtre **Models browser**, sélectionnez **emojiopoly-model** dans la liste.
-   Cliquez sur le bouton **Inspect** (icône avec des lunettes).
-   Une nouvelle fenêtre **Moose Inspector** apparaîtra.
-   Cliquez sur **Card** dans la liste de gauche.
-   Vous verrez une sous-fenêtre **a FamixTypeScriptClass (Card)** à gauche.
-   Cliquez sur l'onglet **SourceText** en haut de cette sous-fenêtre pour voir le code source de la classe.
-   Cliquez sur l'onglet **Moose Properties** pour voir les propriétés Moose de cette classe.

![Animation de Moose pour inspecter un modèle](assets/AnimationMooseInspectModel.gif)

### Faire une requête simple

Dans une fenêtre Playground, exécutez le code suivant:

``` st
"Get the emojiopoly model (first in Moose panel)"
tsModel := MooseModel root first.
"Find all classes that have 100 or more lines of code"
bigClasses := tsModel allModelClasses 
    select: [ :each | 
        each numberOfLinesOfCode >= 100 ]
```

Le résultat devrait généralement inclure une seule classe, **`MonopolyGame`**. Vous pouvez la sélectionner et consulter son code source pour vérifier.

Dans l'onglet **Navigation**, vous pouvez également voir ses méthodes, ses attributs, etc.

Pour obtenir une liste de méthodes longues (contenant 20 lignes ou plus) dans le projet, exécutez ce script:

``` st
"Get the emojiopoly model (first in Moose panel)"
tsModel := MooseModel root first.
"Find all methods that have 20 or more lines of code"
longMethods := tsModel allMethods 
    select: [ :each | 
        each numberOfLinesOfCode >= 20 ]
```

Pour trouver la classe à laquelle chaque méthode appartient, consultez la propriété **`parentType`** dans la navigation.

### Faire une visualisation des classes

Vous pouvez vous inspirer d'une [visualisation en Roassal](https://learning-oreilly-com.res.banq.qc.ca/library/view/agile-visualization-with/9781484271612/html/489192_1_En_4_Chapter.xhtml#:-:text=%22The%20variable%20classes,c%20%40%20RSCanvasController.) (une bibliothèque de visualisation dans Pharo) pour représenter visuellement les classes dans un modèle Moose:

``` {.smalltalk code-line-numbers="true"}
"The variable classes contains the classes we would like to visualize"
classes := MooseModel root first allModelClasses.
"A canvas is a container of graphical shapes"
c := RSCanvas new.
"Each class is represented as a box"
classes do: [ :aClass | c add: (RSBox new model: aClass) ].
"The width of each class indicates the number of variables defined in the class"
RSNormalizer width shapes: c shapes; from: 6; to: 20;
    normalize: #numberOfAttributes.
"Height of each class represents the number of methods"
RSNormalizer height shapes: c shapes; normalize: #numberOfMethods.
"A class color goes from gray to red, indicating the number of lines of code"
RSNormalizer color shapes: c shapes;
    from: Color gray; to: Color red; normalize: #numberOfLinesOfCode.
"Vertical lines indicate the inheritance relationship"
RSLineBuilder orthoVertical
    canvas: c; withVerticalAttachPoint; color: Color lightGray;
    connectFrom: #superclass.
"Use a tree layout to adequately locate the classes"
RSTreeLayout on: c nodes.
"We make all the classes draggable and with a contextual popup window"
c nodes @ RSDraggable @ RSPopup.
"The whole visualization is zoomable, draggable, and shapes may be searched in it"
c @ RSCanvasController.
```

Cette visualisation représente les classes sous forme de rectangles. Chaque rectangle a trois dimensions :

-   La *couleur* de chaque rectangle représente le nombre de lignes de code. Le gris signifie un nombre relativement faible de lignes de code, tandis que le rouge indique un nombre relativement élevé de lignes de code. La variation de couleur est gérée par la classe **`RSNormalizer`**.
-   La *hauteur* de chaque rectangle représente le nombre de méthodes.
-   La *largeur* de chaque rectangle représente le nombre d'attributs.

::: callout-tip
La visualisation obtient les données de chaque élément Moose à travers les propriétés, par exemple `#numberOfAttributes`, `#numberOfMethods` et `#numberOfLinesOfCode`. Au fait, ce sont des méthodes (accesseurs) des éléments Famix, par exemple `FamixTypeScriptClass` qui fournissent les valeurs. On peut trouver d'autres propriétés dans l'onglet **Moose Properties** de ces éléments.
:::

![Visualisation du modèle Moose du projet Emojiopoly](assets/VisualisationMooseRoassal.gif)

Avec le projet **emojiopoly**, on voit bien que la classe `MonopolyGame` a beaucoup de méthodes (sa hauteur) et aussi beaucoup de lignes de code (sa couleur rouge).

::: callout-tip
La syntaxe avec le dièse utilisée à la ligne 9, **`normalize: #numberOfAttributes`**, est un raccourci syntaxique pour une expression de bloc plus longue : **`normalize: [:element | element numberOfAttributes ]`**. Parfois, vous voudrez effectuer un calcul sur la valeur utilisée dans la visualisation, par exemple en la combinant avec un autre attribut comme le nombre de **`receivingInvocations`**. Dans ce cas, vous feriez **`normalize: [:element | element numberOfAttributes + element receivingInvocations size ]`**.
:::

La disposition (**`RSTreeLayout`**) permet également de visualiser la hiérarchie des classes en ce qui concerne l'héritage. Cependant, le projet **emojiopoly** n'utilise pas l'héritage en TypeScript, donc aucune arborescence n'est visible dans la visualisation.

# Conclusion

Vous avez effectué les étapes nécessaires pour analyser des programmes en TypeScript à l'aide de l'outil Moose dans Pharo, en utilisant un métamodèle Famix et un importateur (**`ts2famix`**).

Il est important de comprendre que le métamodèle influence également d'autres éléments du processus, notamment l'importateur et le fichier **`.json`** qu'il génère (le modèle).

``` plantuml
@startdot
digraph a {
  bgcolor="transparent"
  rank=same
  rankdir=LTR
  node[group=a, fontname="Arial", fontsize=14];
  node[style=filled];
  ts2famix [fillcolor=yellow shape=box label="ts2famix"];
  model [fillcolor=orange shape=box label="modèle\n(json)"];
  node[fillcolor=lightgreen style="rounded,filled" shape="box"]
  mm [label = "Métamodèle\nFamixTypeScript"]
  mm -> { ts2famix model } [arrowhead=none color=gray style=dashed] ;
  }
@enddot
```

L'importateur `ts2famix` dépend du métamodèle FamixTypeScript, car il transforme un programme TypeScript en modèle Famix, selon la structure du métamodèle.
